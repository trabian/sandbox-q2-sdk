{"version":3,"file":"q2-ui.cjs.production.min.js","sources":["../src/tecton/Icon.tsx","../src/tecton/Button.tsx","../src/tecton/DatePicker.tsx","../src/tecton/DropdownSelect.tsx","../src/theme.ts","../src/ThemeProvider.tsx","../src/components/AccountOption.tsx","../src/tecton/Checkbox.tsx","../src/tecton/Dropdown.tsx","../src/tecton/InlineEdit.tsx","../src/tecton/Input.tsx","../src/tecton/LoadingIndicator.tsx","../src/tecton/Message.tsx","../src/tecton/Radio.tsx","../src/tecton/Section.tsx","../src/tecton/Tabs.tsx","../src/tecton/Tooltip.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport styled from '@emotion/styled';\nimport { system } from 'styled-system';\n\nimport { createShouldForwardProp } from '@styled-system/should-forward-prop';\nimport { ResponsiveStyleValue, WithClass } from './utils';\n\nexport type IconProps = Q2IconProps &\n  React.DetailedHTMLProps<\n    Omit<React.SVGAttributes<SVGElement>, 'stroke' | 'strokeWidth'>,\n    SVGElement\n  >;\n\nconst shouldForwardProp = createShouldForwardProp([\n  'strokeWidth',\n  'stroke',\n  'strokeSecondary',\n]);\n\nconst Q2Icon: FC<IconProps> = ({ className, ...props }) => {\n  return <q2-icon class={className} {...props} />;\n};\n\nconst StyledIcon = styled(Q2Icon, {\n  shouldForwardProp,\n})(\n  system({\n    // @ts-ignore\n    strokeWidth: {\n      property: '--t-icon-stroke-width',\n    },\n    // @ts-ignore\n    stroke: {\n      property: '--t-icon-stroke-primary',\n      scale: 'colors',\n    },\n    // @ts-ignore\n    strokeSecondary: {\n      property: '--t-icon-stroke-secondary',\n      scale: 'colors',\n    },\n  })\n);\n\nconst Icon: FC<Omit<IconProps, 'ref'>> = ({ type, ...props }) => {\n  return <StyledIcon type={type} {...props} />;\n};\n\nexport default Icon;\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-icon': IconProps & WithClass;\n    }\n  }\n}\n\nexport type Q2IconProps = {\n  type:\n    | 'a11y'\n    | 'add'\n    | 'airplane'\n    | 'arrow-up'\n    | 'arrow-down'\n    | 'arrow-left'\n    | 'arrow-right'\n    | 'bank'\n    | 'barchart'\n    | 'barchart-trend'\n    | 'bell'\n    | 'bicycle'\n    | 'briefcase'\n    | 'bubble-graph'\n    | 'bug'\n    | 'buildings'\n    | 'calculator'\n    | 'calendar'\n    | 'calendar-create'\n    | 'calendar-remove'\n    | 'calendar-skip'\n    | 'calendar-time'\n    | 'camera'\n    | 'car'\n    | 'car-front'\n    | 'cart'\n    | 'cart-moving'\n    | 'cash'\n    | 'cash-coins'\n    | 'cash-bills'\n    | 'cash-in-hand'\n    | 'cash-register'\n    | 'certificate'\n    | 'chat'\n    | 'chat-bubbles'\n    | 'chat-round'\n    | 'check'\n    | 'check-edit'\n    | 'checkmark'\n    | 'checkmark-outline'\n    | 'chevron-up'\n    | 'chevron-down'\n    | 'chevron-left'\n    | 'chevron-right'\n    | 'close'\n    | 'coins'\n    | 'compass'\n    | 'conversation'\n    | 'coupon'\n    | 'document'\n    | 'document-add'\n    | 'document-checklist'\n    | 'document-remove'\n    | 'download'\n    | 'edit'\n    | 'ellipsis'\n    | 'external-link'\n    | 'eye-hide'\n    | 'eye-show'\n    | 'face-id'\n    | 'filebox'\n    | 'filter'\n    | 'fingerprint'\n    | 'flag'\n    | 'gear'\n    | 'gift'\n    | 'gold-bars'\n    | 'government'\n    | 'gps'\n    | 'graduation-cap'\n    | 'grid-x2'\n    | 'grid-x3'\n    | 'hamburger-menu'\n    | 'hand'\n    | 'hand-with-coins'\n    | 'handshake'\n    | 'headset'\n    | 'health'\n    | 'heart'\n    | 'heart-add'\n    | 'heart-remove'\n    | 'home'\n    | 'home-chimney'\n    | 'id-badge'\n    | 'inbox'\n    | 'inbox-checked'\n    | 'inbox-full'\n    | 'lightbulb'\n    | 'linechart'\n    | 'linechart-trend'\n    | 'link'\n    | 'list'\n    | 'location'\n    | 'location-base'\n    | 'location-prohibited'\n    | 'lock'\n    | 'logout'\n    | 'loop'\n    | 'mail'\n    | 'math'\n    | 'megaphone'\n    | 'message-forward'\n    | 'message-reply'\n    | 'money-time'\n    | 'movie'\n    | 'music'\n    | 'newspaper'\n    | 'options'\n    | 'palette'\n    | 'paperclip'\n    | 'paper-plane'\n    | 'paw'\n    | 'percent'\n    | 'person'\n    | 'person-to-person'\n    | 'personal-care'\n    | 'piechart'\n    | 'piechart-expanded'\n    | 'piggy-bank'\n    | 'play'\n    | 'pricetag'\n    | 'pricetag-blank'\n    | 'pricetag-time'\n    | 'print'\n    | 'prohibited'\n    | 'question'\n    | 'receipt'\n    | 'receipt-list'\n    | 'receipt-list-top'\n    | 'receipt-top'\n    | 'refresh'\n    | 'remove'\n    | 'repeat'\n    | 'repeat-time'\n    | 'ribbon'\n    | 'save'\n    | 'school'\n    | 'search'\n    | 'silverware'\n    | 'shield'\n    | 'skip'\n    | 'sort'\n    | 'speedometer'\n    | 'split'\n    | 'star'\n    | 'star-add'\n    | 'star-remove'\n    | 'steering-wheel'\n    | 'storefront'\n    | 'storefront-add'\n    | 'storefront-prohibited'\n    | 'storefront-remove'\n    | 'time'\n    | 'tools'\n    | 'tractor'\n    | 'transfer'\n    | 'trash'\n    | 'truck-with-lock'\n    | 'umbrella'\n    | 'unlink'\n    | 'wallet'\n    | 'watch'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'android'\n    | 'browser-chrome'\n    | 'browser-edge'\n    | 'browser-firefox'\n    | 'browser-ie'\n    | 'browser-opera'\n    | 'browser-safari'\n    | 'desktop'\n    | 'ios'\n    | 'laptop'\n    | 'phone'\n    | 'tablet'\n    | 'card'\n    | 'card-edit'\n    | 'card-add'\n    | 'card-heart'\n    | 'card-gift'\n    | 'card-insert'\n    | 'card-join'\n    | 'card-in-hand'\n    | 'card-locked'\n    | 'card-more'\n    | 'card-prohibited'\n    | 'card-remove'\n    | 'card-scissors'\n    | 'card-star'\n    | 'card-success'\n    | 'card-unknown'\n    | 'card-update'\n    | 'currency-dollar'\n    | 'currency-dollar-circle'\n    | 'currency-euro'\n    | 'currency-pound'\n    | 'currency-yen'\n    | 'gesture-hand'\n    | 'gesture-scroll-horizontal'\n    | 'gesture-scroll-vertical'\n    | 'gesture-stretch'\n    | 'gesture-swipe-down'\n    | 'gesture-swipe-left'\n    | 'gesture-swipe-right'\n    | 'gesture-swipe-up'\n    | 'gesture-tap'\n    | 'mobile-button'\n    | 'mobile-edit'\n    | 'mobile-heart'\n    | 'mobile-location'\n    | 'mobile-lock'\n    | 'mobile-remove'\n    | 'mobile-rotate'\n    | 'mobile-search'\n    | 'mobile-settings'\n    | 'mobile-time';\n\n  strokeWidth?: ResponsiveStyleValue<number>;\n\n  stroke?: ResponsiveStyleValue<string>;\n\n  strokeSecondary?: ResponsiveStyleValue<string>;\n};\n","import React, { FC } from 'react';\n\nimport Icon, { Q2IconProps } from './Icon';\nimport classNames from 'classnames';\nimport { WithClass } from './utils';\n\ntype ButtonProps = Q2ButtonProps &\n  React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n\nconst Button: FC<ButtonProps> = ({\n  badge = false,\n  block = false,\n  disabled = false,\n  icon = false,\n  className,\n  ...props\n}) => {\n  // Tecton adds a `hydrated` classname when Tecton components are loaded but\n  // doesn't consistently reapply the classname on rerender.\n  const cls = classNames([className]);\n\n  return (\n    <q2-btn\n      badge={badge}\n      block={block ? true : undefined}\n      disabled={disabled}\n      icon={icon}\n      class={cls}\n      {...props}\n    />\n  );\n};\n\n// both button and icon have a 'type'; button also has an 'icon'\nexport type IconButtonProps = Omit<Q2IconProps, 'type'> &\n  Omit<ButtonProps, 'icon'> & { icon: Q2IconProps['type'] };\n\nconst iconStrokeColor = (color?: ButtonProps['color']) => {\n  return color ? `var(--q2-btn-${color}-font-color)` : undefined;\n};\n\nexport const IconButton: FC<IconButtonProps> = ({\n  type,\n  icon,\n  color,\n  strokeWidth,\n  stroke = iconStrokeColor(color),\n  strokeSecondary,\n  ...props\n}) => {\n  return (\n    <Button type={type} color={color} icon={true} {...props}>\n      <Icon\n        type={icon}\n        strokeWidth={strokeWidth}\n        stroke={stroke}\n        strokeSecondary={strokeSecondary}\n      />\n    </Button>\n  );\n};\n\nexport default Button;\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-btn': ButtonProps & WithClass;\n    }\n  }\n}\n\ntype Q2ButtonProps = {\n  color?: 'primary' | 'secondary';\n\n  /**\n   * Use the block attribute to create buttons that fill the width of their\n   * parent element.\n   */\n  block?: boolean;\n\n  /**\n   * Add the badge attribute to implement a badge-style q2-btn. Badge buttons\n   * are useful for quickly changing between filtered views, similar to tabs.\n   * Badge buttons are used to change between the \"All\" and \"Selected\" views\n   * within a multiselect q2-select, for example.\n   */\n  badge?: boolean;\n\n  /**\n   * Add the disabled prop to a Button to show the disabled state. Disabled\n   * buttons display at 40% opacity and show the not-allowed cursor when\n   * hovered.\n   */\n  disabled?: boolean;\n\n  /**\n   * Use the icon flag and a nested icon to create an icon-only Button.\n   */\n  icon?: boolean;\n};\n","import React, { FC, useRef, useEffect } from 'react';\nimport useEventListener from '@use-it/event-listener';\nimport { WithClass } from './utils';\n\ntype DivProps = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>;\n\nexport type DatePickerProps = Q2DatePickerProps &\n  DivProps & {\n    id: NonNullable<DivProps['id']>;\n  };\n\nconst checksums: { [key: string]: number } = {\n  sunday: 1,\n  monday: 2,\n  tuesday: 4,\n  wednesday: 8,\n  thursday: 16,\n  friday: 32,\n  saturday: 64,\n};\n\nconst calculateDOWChecksum = (validDays: DaysOfWeek[]) => {\n  const checksum = validDays\n    .map(day => checksums[day.toString()])\n    .reduce((acc, el) => {\n      return acc + el;\n    });\n  return checksum > 0 ? checksum : undefined;\n};\n\nconst allDays: DaysOfWeek[] = Object.keys(checksums) as DaysOfWeek[];\n\nconst weekendDays = ['saturday', 'sunday'];\n\nconst getDaysOfWeekChecksum = ({\n  blockWeekends,\n  validDaysOfWeek,\n}: Pick<DatePickerProps, 'blockWeekends' | 'validDaysOfWeek'>) => {\n  let days = validDaysOfWeek;\n\n  if (blockWeekends) {\n    days = days?.filter(day => !weekendDays.includes(day));\n  }\n\n  return days ? calculateDOWChecksum(days) : undefined;\n};\n\nexport const DatePicker: FC<DatePickerProps> = ({\n  validDaysOfWeek = allDays,\n  blockWeekends = false,\n  startDate,\n  validDates,\n  invalidDates,\n  onChange,\n  ...props\n}) => {\n  const ref = useRef<any>();\n\n  const daysOfWeekChecksum = getDaysOfWeekChecksum({\n    blockWeekends,\n    validDaysOfWeek,\n  });\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      ref.current.validDates = validDates;\n      ref.current.invalidDates = invalidDates;\n    }\n  }, [ref.current, validDates, invalidDates]);\n\n  useEventListener(\n    'change',\n    (event: any) => {\n      if (onChange) {\n        event.stopPropagation();\n        // work around a bug where the `change` listener is fired simultaneously for all calendars\n        if (event.target.id === props.id) {\n          onChange({\n            ...event,\n            type: 'input',\n            target: {\n              id: event.target.id,\n              value: event.detail.value,\n            },\n          });\n        }\n      }\n    },\n    ref.current\n  );\n\n  return (\n    <q2-calendar\n      ref={ref}\n      days-of-week-checksum={daysOfWeekChecksum}\n      start-date={startDate}\n      {...props}\n    />\n  );\n};\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-calendar': DatePickerProps & WithClass;\n    }\n  }\n}\n\ntype DaysOfWeek =\n  | 'monday'\n  | 'tuesday'\n  | 'wednesday'\n  | 'thursday'\n  | 'friday'\n  | 'saturday'\n  | 'sunday';\n\ntype Q2DatePickerProps = {\n  /**\n   * The selected date.\n   */\n  value: string;\n  /**\n   * The visible label for the DatePicker input field.\n   */\n  label?: string;\n  /**\n   * A label shown at the top of the popover date picker.\n   */\n  calendarLabel: string;\n  /**\n   * Text that appears at the bottom of the popover date picker.\n   */\n  disclaimer?: string;\n  /**\n   * Determines the display format of the date field value.\n   * Must be a valid Moment.js format.\n   */\n  displayFormat?: string;\n  /**\n   * When true, appends \"(optional)\" to the q2-calendar field label\n   * and sets aria-required=\"false\".\n   */\n  optional?: boolean;\n  /**\n   * When true, the field is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Text that appears within the q2-calendar field when it is disabled.\n   */\n  disabledMsg?: string;\n  /**\n   * When true, the date picker popover aligns to the left edge of the\n   * q2-calendar input field. When false, the popover aligns to the right\n   * edge of the field.\n   */\n  leftAlign?: boolean;\n  /**\n   * Defines valid days of the week. ex: [\"monday\", \"tuseday\", \"wednesday\", \"friday\"]\n   */\n  validDaysOfWeek?: DaysOfWeek[];\n  /**\n   * Disables the selection of Saturdays and Sundays.\n   */\n  blockWeekends?: boolean;\n  /**\n   * Defines the first selectable date in the date picker popover.\n   * Must be a valid Moment.js date string.\n   */\n  startDate?: string;\n  /**\n   * Defines the last selectable date in the date picker popover.\n   * Must be a valid Moment.js date string.\n   */\n  endDate?: string;\n  /**\n   * Defines an explicit date blacklist.\n   * Each entry in this array must be a valid Moment.js date string.\n   * Note: When explicit date definition like invalidDates is used,\n   * other date validitity methods like daysOfWeekChecksum are overridden.\n   */\n  invalidDates?: string[];\n  /**\n   * Defines a date whitelist.\n   * Each entry in this array must be a valid Moment.js date string.\n   * Note: When explicit date definition like validDates is used,\n   * other date validitity methods like daysOfWeekChecksum are overridden.\n   */\n  validDates?: string[];\n  /**\n   * Specifies a time of day after which a date is no longer valid.\n   * Must be a Moment.js string.\n   * Example: element.cutoffTime = '2020-10-15T14:00:00.000-05:00';\n   */\n  cutOffTime?: string;\n  /**\n   * When errors array has at least one item,\n   * the DatePicker field shows the field validation error styles.\n   * Note: While the field will show validation error styles,\n   * the the error messages themselves are not displayed.\n   */\n  errors?: string[];\n};\n","import React, { FC, useEffect, useRef } from 'react';\n\nimport useEventListener from '@use-it/event-listener';\nimport { WithClass } from './utils';\n\ntype InputProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\ntype OptionProps = React.DetailedHTMLProps<\n  React.OptionHTMLAttributes<HTMLOptionElement>,\n  HTMLOptionElement\n>;\ntype DivProps = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>;\n\nexport type DropdownSelectProps = Q2DropdownSelectProps &\n  InputProps & {\n    onSearchInput?: (query: string) => void;\n  };\n\nexport type DropdownSelectOptionProps = Q2DropdownSelectOptionProps &\n  OptionProps;\n\nexport type DropdownOptGroupProps = Q2DropdownOptGroupProps & DivProps;\n\nexport const DropdownSelectOption: FC<DropdownSelectOptionProps> = ({\n  children,\n  display,\n  ...props\n}) => {\n  if (!display && typeof children === 'string') {\n    display = children;\n  }\n\n  return (\n    <q2-option display={display} {...props}>\n      {children}\n    </q2-option>\n  );\n};\n\nexport const DropdownOptGroup: FC<DropdownOptGroupProps> = props => (\n  <q2-optgroup {...props} />\n);\n\nexport const DropdownSelect: FC<DropdownSelectProps> = ({\n  children,\n  multiple,\n  multilineOptions,\n  onSearchInput,\n  onChange,\n  value,\n  ...props\n}) => {\n  const ref = useRef<any>();\n\n  //Emitted when an option is selected.\n  useEventListener(\n    'change',\n    (event: any) => {\n      if (!onChange) {\n        return;\n      }\n\n      const value = multiple\n        ? event.detail.selectedOptions\n        : event.detail.value;\n\n      onChange(value);\n    },\n    ref.current\n  );\n\n  // Set the `selectedOptions` attribute on the component based on the value.\n  // Setting the property directly on the web component doesn't work for array\n  // values.\n  useEffect(() => {\n    if (value && multiple && ref.current) {\n      ref.current.selectedOptions = value as string[];\n    }\n  }, [value, multiple]);\n\n  useEventListener(\n    'input',\n    event => {\n      //@ts-ignore\n      const newQuery: string = event.detail.query;\n      if (onSearchInput) {\n        onSearchInput(newQuery);\n      }\n    },\n    ref.current\n  );\n\n  return (\n    <q2-select\n      multiline-options={multilineOptions}\n      multiple={multiple}\n      searchable={Boolean(onSearchInput)}\n      ref={ref as any}\n      value={multiple ? undefined : value}\n      style={{ margin: 0 }}\n      {...props}\n    >\n      {children}\n    </q2-select>\n  );\n};\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-select': DropdownSelectProps & WithClass;\n      'q2-option': DropdownSelectOptionProps & WithClass;\n      'q2-optgroup': DropdownOptGroupProps & WithClass;\n    }\n  }\n}\n\ntype Q2DropdownSelectProps = {\n  label?: string;\n  /**\n   * The current value for the select and should correspond to the\n   * value of a nested option. This property is only relevant for\n   * single select implementations. Pre-select options for single\n   * selects by defining the value property.\n   */\n  value?: string;\n  /**\n   * Each item in this array should correspond to the value of a option.\n   * This property is only relevant for multiselect implementations.\n   * Pre-select options for multiselects by defining the selectedOptions property.\n   */\n  selectedOptions?: string[];\n  /**\n   * Binds to the nested q2-input element. Note that error messages are\n   * not available to the user. q2-select uses this property to show an\n   * error state and its primary use case is for an unfilled field.\n   */\n  errors?: string[];\n  /**\n   * Disables all interaction with the field and leverages the disabled\n   * visual style of q2-input.\n   */\n  disabled?: boolean;\n  /**\n   * Enables multiselect functionality.\n   */\n  multiple?: boolean;\n  /**\n   * Enables search functionality.\n   */\n  searchable?: boolean;\n  /**\n   * Enables text wrapping for select options. When false,\n   * text truncates and does not wrap.\n   */\n  multilineOptions?: boolean;\n  /**\n   * Marks the field as optional by passing this value to the nested q2-input.\n   */\n  optional?: boolean;\n};\n\ntype Q2DropdownOptGroupProps = {\n  /**\n   * Serves as the group's header and it is sticky using position:sticky;\n   */\n  label: string;\n  /**\n   * Disables all nested options.\n   */\n  disabled?: boolean;\n};\n\ntype Q2DropdownSelectOptionProps = {\n  /**\n   * Serves as the option's value. Should correspond to the q2-select value.\n   */\n  value: string;\n  /**\n   * The text that is presented in the field if selected; if not set,\n   * the value will be used.\n   */\n  display?: string;\n  /**\n   * disables option\n   */\n  disabled?: boolean;\n};\n","import * as CSS from 'csstype';\nimport { ObjectOrArray } from 'styled-system';\nimport { Theme } from 'theme-ui';\n\nconst cssVar = (name: string) => `var(--${name})`;\n\nconst cssVarList = (\n  start: number,\n  end: number,\n  prefix: string,\n  defaultVal = ''\n) => {\n  let list = [];\n  for (let i = 0; i <= end; i++) {\n    if (i < start) {\n      // Follow the index pattern of the underlying css var. For example,\n      // `highlight.1` should map to `t-highlight-1`, so we skip `highlight.0`\n      // since the css variables start at 1.\n      list.push(defaultVal);\n    } else {\n      list.push(cssVar(`${prefix}${i}`));\n    }\n  }\n  return list;\n};\n\nexport type CustomTheme = Theme & {\n  variants: ObjectOrArray<CSS.StandardProperties>;\n};\n\nconst theme: CustomTheme = {\n  fonts: {\n    body: 'system-ui, sans-serif',\n    heading: '\"Avenir Next\", sans-serif',\n    monospace: 'Menlo, monospace',\n  },\n  colors: {\n    text: cssVar('t-font-color'),\n    muted: cssVar('t-a11y-gray-color'),\n    background: cssVar('t-content-bg'),\n    link: cssVar('t-link-color'),\n    linkHover: cssVar('t-link-hover-color'),\n    primary: cssVar('t-primary'),\n    primaryLight: cssVarList(1, 2, 't-primary-l'),\n    primaryDark: cssVarList(1, 2, 't-primary-d'),\n    secondary: cssVar('t-secondary'),\n    secondaryLight: cssVarList(1, 2, 't-secondary-l'),\n    secondaryDark: cssVarList(1, 2, 't-secondary-d'),\n    black: cssVar('app-black'),\n    white: cssVar('app-white'),\n    gray: cssVar('app-gray'),\n    grayLight: cssVarList(1, 3, 'app-gray-l'),\n    grayDark: cssVarList(1, 3, 'app-gray-d'),\n    highlight: cssVarList(1, 15, 't-highlight-'),\n    stoplight: {\n      info: cssVar('const-stoplight-info'),\n      success: cssVar('const-stoplight-success'),\n      warning: cssVar('const-stoplight-warning'),\n      alert: cssVar('const-stoplight-alert'),\n    },\n  },\n  // https://cdn1.onlineaccess1.com/cdn/base/tecton/v0.39.1/Documentation/index.html#/ui/grid-layout\n  breakpoints: ['480px', '768px', '992px', '1200px'],\n  space: cssVarList(0, 6, 'app-scale-'),\n  radii: cssVarList(1, 2, 'app-border-radius-', '0'),\n  shadows: cssVarList(1, 2, 'app-shadow-'),\n  variants: {\n    primary: {\n      bg: 'primary',\n      color: 'white',\n    },\n    secondary: {\n      bg: 'secondary',\n      color: 'text',\n    },\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport { CacheProvider } from '@emotion/core';\nimport createCache from '@emotion/cache';\n\nimport { ThemeProvider as ThemeUIProvider } from 'theme-ui';\n\n// @ts-ignore\nimport extraScopePlugin from 'stylis-plugin-extra-scope';\n\nimport defaultTheme, { CustomTheme } from '../src/theme';\n\nconst cache = createCache({\n  key: 'tecton',\n  stylisPlugins: [extraScopePlugin('[data-tecton-module]')],\n});\n\ntype Props = {\n  theme?: Partial<CustomTheme> | ((outerTheme: CustomTheme) => CustomTheme);\n  children?: React.ReactNode;\n};\n\nconst ThemeProvider: React.FC<Props> = ({ theme = defaultTheme, children }) => {\n  return (\n    <CacheProvider value={cache}>\n      <ThemeUIProvider theme={theme}>{children}</ThemeUIProvider>\n    </CacheProvider>\n  );\n};\n\nexport default ThemeProvider;\n","/** @jsx jsx */\nimport { Box, Flex, Text, jsx } from 'theme-ui';\nimport { FC } from 'react';\n\nimport numeral from 'numeral';\n\nimport { DropdownSelectOption } from '../tecton';\n\ntype AccountOptionProps = {\n  id: string;\n  name: string;\n  maskedAccountNumber: string;\n  balance?: number;\n  display?: string;\n};\n\n// TODO: Determine how they're handling currency\nexport const AccountOption: FC<AccountOptionProps> = ({\n  id,\n  name,\n  maskedAccountNumber,\n  balance,\n  display = `${name} ${maskedAccountNumber}`,\n}) => {\n  return (\n    <DropdownSelectOption value={id} display={display}>\n      <Flex sx={{ alignItems: 'center' }}>\n        <Box sx={{ flex: 1 }}>\n          <Text sx={{ fontWeight: 'bold' }}>{name}</Text>\n          <Text sx={{ color: 'muted' }}>{maskedAccountNumber}</Text>\n        </Box>\n        {balance ? (\n          <Text sx={{ fontWeight: 'semibold' }}>\n            {numeral(balance).format('($0,0.00)')}\n          </Text>\n        ) : null}\n      </Flex>\n    </DropdownSelectOption>\n  );\n};\n","import React, { FC, useEffect, useRef } from 'react';\nimport { WithClass } from './utils';\n\nexport const Checkbox: FC<CheckboxProps> = ({\n  disabled = false,\n  indeterminate = false,\n  className,\n  onChange,\n  ...props\n}) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    (ref.current as any).onchange = onChange;\n  }, [onChange]);\n\n  return (\n    <q2-checkbox\n      ref={ref as any}\n      disabled={disabled}\n      indeterminate={indeterminate}\n      class={className}\n      {...props}\n    />\n  );\n};\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-checkbox': CheckboxProps & WithClass;\n    }\n  }\n}\n\nexport type CheckboxProps = Q2CheckboxProps &\n  React.DetailedHTMLProps<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n\ntype Q2CheckboxProps = {\n  /**\n   * The state of the checkbox. This controls the visual appearance of the\n   * element.\n   */\n  checked?: boolean;\n\n  /**\n   * The visual style of the checkbox. This does not need to be defined for a\n   * standard checkbox.\n   */\n  type?: 'toggle' | 'favorite';\n\n  /**\n   * The visible label text for the checkbox. Appears to the right of the box\n   * for default and favorite checkboxes and appears to the left for toggles.\n   * Yielded content will be adjacent to this text.\n   *\n   * **Localizable**\n   */\n  label?: string;\n\n  /**\n   * The aria-label text for the checkbox. This will not be read if a label is provided.\n   */\n  'aria-label'?: string;\n\n  /**\n   * Use on a parent checkbox (e.g. \"Select all\") in a checkbox group to\n   * indicate that some, but not all, checkboxes in the group are checked.\n   *\n   * When indeterminate is true, the \"indeterminate\" selection style is applied.\n   * To apply the standard \"checked\" selection style, checked must be true and\n   * indeterminate must be false\n   */\n  indeterminate?: boolean;\n\n  /**\n   * Disables the checkbox and prevents user interaction.\n   */\n  disabled?: boolean;\n\n  /**\n   * A static reference value for the checkbox.\n   */\n  value?: string;\n\n  /**\n   * A static string to establish a symbolic relationship between checkboxes.\n   */\n  name?: string;\n};\n","import React, { FC } from 'react';\nimport { Q2IconProps } from './Icon';\nimport { WithClass } from './utils';\n\ntype DropdownProps = Q2DropdownProps &\n  React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\ntype DropdownItemProps = Q2DropdownItemProps &\n  React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > & {\n    onRemove?: () => void;\n  };\n\nexport const Dropdown: FC<DropdownProps> = ({ children, ...props }) => {\n  return <q2-dropdown {...props}>{children}</q2-dropdown>;\n};\n\nexport const DropdownItem: FC<DropdownItemProps> = ({\n  label,\n  onClick,\n  onRemove,\n  ...props\n}) => {\n  const handleClick = (e: any) => {\n    if (e.detail.type === 'remove') {\n      if (onRemove) {\n        onRemove();\n      }\n    } else if (onClick) {\n      onClick(e);\n    }\n  };\n\n  return (\n    <q2-dropdown-item\n      onClick={handleClick}\n      removable={Boolean(onRemove)}\n      {...props}\n    >\n      {label}\n    </q2-dropdown-item>\n  );\n};\n\nexport const DropdownSeparator: FC = () => (\n  <q2-dropdown-item separator={true} />\n);\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-dropdown': DropdownProps & WithClass;\n      'q2-dropdown-item': DropdownItemProps & WithClass;\n    }\n  }\n}\n\ntype Q2DropdownProps = {\n  /**\n   * The type of button used as the menu toggle. (default: \"icon\")\n   */\n  type?: 'icon' | 'primary' | 'secondary' | 'neutral';\n\n  /**\n   * The icon that will render within the toggle button.\n   */\n  icon?: Q2IconProps['type'];\n  /**\n   * The text that appears within the button.\n   * This property should not be used if the type is icon.\n   * This property supports localization keys.\n   */\n  label?: string;\n  /**\n   * Side of the button to align the dropdown to.\n   */\n  alignment?: 'left' | 'right';\n  /**\n   * The label that will be announced by screen readers when the\n   * toggle button is focused.\n   */\n  ariaLabel?: string;\n  /**\n   * When true, the menu cannot be focused or otherwise interacted with.\n   */\n  disabled?: boolean;\n  /**\n   * Use popDirection to control the direction the pop up menu extends, either up or down. If no value is passed the component auto detects based on available space below it. The component auto-detection will drop down unless it detects there is not suffiencent height left to do so, in which case it will pop up.\n   */\n  popDirection?: boolean;\n};\n\ntype Q2DropdownItemProps = {\n  /**\n   * The text that appears within the dropdown item.\n   */\n  label?: string;\n  /**\n   * When true, the item cannot be interacted with and its click event\n   * is blocked.\n   */\n  disabled?: boolean;\n  /**\n   * When true, an icon button is rendered into the item. Clicking on\n   * this button will change the type emitted on the item's click event\n   * detail to \"remove\".\n   */\n  removable?: boolean;\n  /**\n   * When true, a line is rendered in the item instead of text\n   * Click events fired from these items will not have the click event details\n   * provided by other items.\n   */\n  separator?: boolean;\n  /**\n   * A static reference value for the item; this value is returned in the\n   * click event detail.\n   */\n  value?: string;\n  /**\n   * The label that will be announced by screen readers when the\n   * toggle button is focused.\n   */\n  ariaLabel?: string;\n};\n","import React, { FC, useRef } from 'react';\n\nimport useEventListener from '@use-it/event-listener';\nimport { WithClass } from './utils';\n\nexport type InlineEditProps = Q2InlineEditProps &\n  React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n\nexport const InlineEdit: FC<InlineEditProps> = ({\n  persistentLabel,\n  ariaLabel,\n  formatModifier,\n  onChange,\n  ...props\n}) => {\n  const ref = useRef<any>();\n\n  useEventListener(\n    'input',\n    (event: any) => {\n      if (onChange) {\n        event.stopPropagation();\n        onChange({\n          ...event,\n          // @ts-ignore\n          type: 'input',\n          target: {\n            value: event.detail.value,\n            formattedValue: event.detail.formattedValue,\n          },\n        });\n      }\n    },\n    ref.current\n  );\n\n  return (\n    <q2-editable-field\n      persistent-label={persistentLabel ? true : undefined}\n      aria-label={ariaLabel}\n      format-modifier={formatModifier}\n      ref={ref}\n      {...props}\n    />\n  );\n};\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-editable-field': InlineEditProps & WithClass;\n    }\n  }\n}\n\ntype Q2InlineEditProps = {\n  /**\n   * Serves as the visible text while in the read state and the\n   * default value of the input while in the edit state.\n   */\n  value: string;\n  /**\n   * The visible descriptor for the element. Serves as the\n   * input label while in the edit state and as decorated\n   * label for the read state when persistentLabel is true.\n   */\n  label?: string;\n  /**\n   * Binds to the aria-label for the input field while in\n   * the edit state. This should not be used at the same\n   * time as the label.\n   */\n  ariaLabel?: string;\n  /**\n   * Controls the edit state of the element.\n   */\n  editing?: boolean;\n  /**\n   * Binds to the nested q2-input element.\n   */\n  type?: string;\n  /**\n   * Binds to the nested q2-input element.\n   * Applicable when type=\"currency\".\n   */\n  formatModifier?: string;\n  /**\n   * Binds to the nested q2-input element.\n   */\n  maxLength?: number;\n  /**\n   * Binds to the nested q2-input element.\n   */\n  hints?: string[];\n  /**\n   * Binds to the nested q2-input element.\n   */\n  errors?: string[];\n  /**\n   * Displays the provided label in the read state.\n   */\n  persistentLabel?: boolean;\n};\n","import React, { FC, useRef } from 'react';\n\nimport useEventListener from '@use-it/event-listener';\nimport { WithClass } from './utils';\nimport { Q2IconProps } from './Icon';\n\nexport type InputProps = {\n  errors?: string | string[];\n  hints?: string | string[];\n} & Q2InputProps &\n  React.DetailedHTMLProps<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n\nexport const Input: FC<InputProps> = ({\n  formatModifier,\n  iconLeft,\n  iconRight,\n  ariaLabel,\n  onChange,\n  disabled = false,\n  hideMessages = false,\n  readonly = false,\n  clearable = false,\n  optional = false,\n  errors = [],\n  hints = [],\n  ...props\n}) => {\n  const ref = useRef<any>();\n\n  useEventListener(\n    'input',\n    (event: any) => {\n      if (onChange) {\n        event.stopPropagation();\n        onChange({\n          ...event,\n          // @ts-ignore\n          type: 'input',\n          target: {\n            value: event.detail.value,\n            formattedValue: event.detail.formattedValue,\n          },\n        });\n      }\n    },\n    ref.current\n  );\n\n  React.useEffect(() => {\n    if (ref && ref.current) {\n      ref.current.errors = typeof errors === 'string' ? [errors] : errors;\n    }\n  }, [errors]);\n\n  React.useEffect(() => {\n    if (ref && ref.current) {\n      ref.current.hints = typeof hints === 'string' ? [hints] : hints;\n    }\n  }, [hints]);\n\n  return (\n    <q2-input\n      ref={ref}\n      {...props}\n      aria-label={ariaLabel}\n      format-modifier={formatModifier}\n      hide-messages={hideMessages || undefined}\n      icon-left={iconLeft}\n      icon-right={iconRight}\n      disabled={disabled || undefined}\n      readonly={readonly || undefined}\n      clearable={clearable || undefined}\n      optional={optional || undefined}\n    />\n  );\n};\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-input': InputProps & WithClass;\n    }\n  }\n}\n\ntype Q2InputProps = {\n  /**\n   * The label that appears above the field.\n   * This is announced by screen readers when the field is focused.\n   * localizable.\n   */\n  label?: string;\n  /**\n   * The value of the input field;\n   * typically, this is identical to the current field input.\n   * When formatting characters are present, only the unformatted value is used.\n   * In q2-input of type \"currency\":\n   * Visible (formatted) input: $1,234.56\n   * Unformatted value: 1234.56\n   */\n  value: string;\n  /**\n   * Specifies the field's expected input type and\n   * provides the optimal keyboard on mobile devices.\n   */\n  type?: InputType;\n  /**\n   * Text that appears within the field when it is blurred and empty.\n   * localizable\n   */\n  placeholder?: string;\n  /**\n   * Indicates the element's intended purpose to assistive technology,\n   * according to the WAI-ARIA Roles Model.\n   */\n  role?: string;\n  /**\n   * When true, the field cannot be focused or otherwise interacted with.\n   */\n  disabled?: boolean;\n  /**\n   * The label that will be announced by screen readers when the field is focused.\n   * localizable\n   */\n  ariaLabel?: string;\n  /**\n   * Each item in the errors array will appear below the input field when the field is focused.\n   * localizable\n   */\n  errors?: string[];\n  /**\n   * Each item in the hints array will appear below the input field when the field is focused.\n   * localizable\n   * The errors array takes precedence above the hints array.\n   * If an input field has both hints and errors, only the errors will display.\n   * Once all errors are resolved, the hints display next time the field is focused.\n   */\n  hints?: string[];\n  /**\n   * When true and the input field has an active validation error,\n   * the field shows the error state without displaying associated error messages\n   * below the field (from the errors array above).\n   */\n  hideMessages?: boolean;\n  /**\n   * Shows an icon within the field, left-aligned.\n   */\n  iconLeft?: Q2IconProps['type'];\n  /**\n   * Shows an icon within the field, right-aligned.\n   */\n  iconRight?: Q2IconProps['type'];\n  /**\n   * When true, the field's content is not editable, but the field remains focusable.\n   */\n  readonly?: boolean;\n  /**\n   * When true, an icon button appears when the field is non-empty.\n   * Pressing the button clears all input from the field.\n   */\n  clearable?: boolean;\n  /**\n   * Appends \"(optional)\" to the field label, and\n   * sets aria-required on the nested input tag to false.\n   */\n  optional?: boolean;\n  /**\n   * Defines the field's expected input format, and automatically masks user input to conform.\n   */\n  formatModifier?:\n    | CurrencyFormatModifier\n    | PhonePostalFormatModifier\n    | NumericFormatModifier\n    | AlphaFormatModifier\n    | DateFormatModifier;\n  /**\n   * Defines the maximum allowed input length in characters.\n   * Formatting characters (e.g. $, ., -, etc) are included in the maxlength count.\n   * Make sure you account for them when setting the maxlength value.\n   */\n  maxLength?: string;\n};\n\ntype InputType =\n  | 'text'\n  | 'tel'\n  | 'number'\n  | 'password'\n  | 'search'\n  | 'url'\n  | 'email'\n  | 'currency'\n  | 'percentage'\n  | 'phone'\n  | 'date'\n  | 'numeric'\n  | 'alphanumeric'\n  | 'alpha'\n  | 'postal'\n  | 'ssn';\n\ntype DateFormatModifier =\n  | 'MM/DD/YYYY'\n  | 'M/D/YYYY'\n  | 'MM/DD/YY'\n  | 'M/D/YY'\n  | 'MM/YY'\n  | 'M/YY'\n  | 'DD/MM/YYYY'\n  | 'D/M/YYYY'\n  | 'DD/MM/YY'\n  | 'D/M/YY'\n  | 'MM-DD-YYYY'\n  | 'M-D-YYYY'\n  | 'MM-DD-YY'\n  | 'M-D-YY'\n  | 'MM-YY'\n  | 'M-YY'\n  | 'DD-MM-YYYY'\n  | 'D-M-YYYY'\n  | 'DD-MM-YY'\n  | 'D-M-YY';\n\ntype AlphaFormatModifier = 'spaced';\n\ntype NumericFormatModifier = 'delimited' | 'integer' | 'Ndec';\n\ntype PhonePostalFormatModifier =\n  | 'AF'\n  | 'AX'\n  | 'AL'\n  | 'DZ'\n  | 'AS'\n  | 'AD'\n  | 'AO'\n  | 'AI'\n  | 'AQ'\n  | 'AG'\n  | 'AR'\n  | 'AM'\n  | 'AW'\n  | 'AU'\n  | 'AT'\n  | 'AZ'\n  | 'BS'\n  | 'BH'\n  | 'BD'\n  | 'BB'\n  | 'BY'\n  | 'BE'\n  | 'BZ'\n  | 'BJ'\n  | 'BM'\n  | 'BT'\n  | 'BO'\n  | 'BQ'\n  | 'BA'\n  | 'BW'\n  | 'BV'\n  | 'BR'\n  | 'IO'\n  | 'BN'\n  | 'BG'\n  | 'BF'\n  | 'BI'\n  | 'CV'\n  | 'KH'\n  | 'CM'\n  | 'CA'\n  | 'KY'\n  | 'CF'\n  | 'TD'\n  | 'CL'\n  | 'CN'\n  | 'CX'\n  | 'CC'\n  | 'CO'\n  | 'KM'\n  | 'CG'\n  | 'CD'\n  | 'CK'\n  | 'CR'\n  | 'CI'\n  | 'HR'\n  | 'CU'\n  | 'CW'\n  | 'CY'\n  | 'CZ'\n  | 'DK'\n  | 'DJ'\n  | 'DM'\n  | 'DO'\n  | 'EC'\n  | 'EG'\n  | 'SV'\n  | 'GQ'\n  | 'ER'\n  | 'EE'\n  | 'SZ'\n  | 'ET'\n  | 'FK'\n  | 'FO'\n  | 'FJ'\n  | 'FI'\n  | 'FR'\n  | 'GF'\n  | 'PF'\n  | 'TF'\n  | 'GA'\n  | 'GM'\n  | 'GE'\n  | 'DE'\n  | 'GH'\n  | 'GI'\n  | 'GR'\n  | 'GL'\n  | 'GD'\n  | 'GP'\n  | 'GU'\n  | 'GT'\n  | 'GG'\n  | 'GN'\n  | 'GW'\n  | 'GY'\n  | 'HT'\n  | 'HM'\n  | 'VA'\n  | 'HN'\n  | 'HK'\n  | 'HU'\n  | 'IS'\n  | 'IN'\n  | 'ID'\n  | 'IR'\n  | 'IQ'\n  | 'IE'\n  | 'IM'\n  | 'IL'\n  | 'IT'\n  | 'JM'\n  | 'JP'\n  | 'JE'\n  | 'JO'\n  | 'KZ'\n  | 'KE'\n  | 'KI'\n  | 'KP'\n  | 'KR'\n  | 'KW'\n  | 'KG'\n  | 'LA'\n  | 'LV'\n  | 'LB'\n  | 'LS'\n  | 'LR'\n  | 'LY'\n  | 'LI'\n  | 'LT'\n  | 'LU'\n  | 'MO'\n  | 'MG'\n  | 'MW'\n  | 'MY'\n  | 'MV'\n  | 'ML'\n  | 'MT'\n  | 'MH'\n  | 'MQ'\n  | 'MR'\n  | 'MU'\n  | 'YT'\n  | 'MX'\n  | 'FM'\n  | 'MD'\n  | 'MC'\n  | 'MN'\n  | 'ME'\n  | 'MS'\n  | 'MA'\n  | 'MZ'\n  | 'MM'\n  | 'NA'\n  | 'NR'\n  | 'NP'\n  | 'NL'\n  | 'NC'\n  | 'NZ'\n  | 'NI'\n  | 'NE'\n  | 'NG'\n  | 'NU'\n  | 'NF'\n  | 'MK'\n  | 'MP'\n  | 'NO'\n  | 'OM'\n  | 'PK'\n  | 'PW'\n  | 'PS'\n  | 'PA'\n  | 'PG'\n  | 'PY'\n  | 'PE'\n  | 'PH'\n  | 'PN'\n  | 'PL'\n  | 'PT'\n  | 'PR'\n  | 'QA'\n  | 'RE'\n  | 'RO'\n  | 'RU'\n  | 'RW'\n  | 'BL'\n  | 'SH'\n  | 'KN'\n  | 'LC'\n  | 'MF'\n  | 'PM'\n  | 'VC'\n  | 'WS'\n  | 'SM'\n  | 'ST'\n  | 'SA'\n  | 'SN'\n  | 'RS'\n  | 'SC'\n  | 'SL'\n  | 'SG'\n  | 'SX'\n  | 'SK'\n  | 'SI'\n  | 'SB'\n  | 'SO'\n  | 'ZA'\n  | 'GS'\n  | 'SS'\n  | 'ES'\n  | 'LK'\n  | 'SD'\n  | 'SR'\n  | 'SJ'\n  | 'SE'\n  | 'CH'\n  | 'SY'\n  | 'TW'\n  | 'TJ'\n  | 'TZ'\n  | 'TH'\n  | 'TL'\n  | 'TG'\n  | 'TK'\n  | 'TO'\n  | 'TT'\n  | 'TN'\n  | 'TR'\n  | 'TM'\n  | 'TC'\n  | 'TV'\n  | 'UG'\n  | 'UA'\n  | 'AE'\n  | 'GB'\n  | 'US'\n  | 'UM'\n  | 'UY'\n  | 'UZ'\n  | 'VU'\n  | 'VE'\n  | 'VN'\n  | 'VG'\n  | 'VI'\n  | 'WF'\n  | 'EH'\n  | 'YE'\n  | 'ZM'\n  | 'ZW';\n\ntype CurrencyFormatModifier =\n  | 'AED'\n  | 'AFN'\n  | 'ALL'\n  | 'AMD'\n  | 'ANG'\n  | 'AOA'\n  | 'ARS'\n  | 'AUD'\n  | 'AWG'\n  | 'AZN'\n  | 'BAM'\n  | 'BBD'\n  | 'BDT'\n  | 'BGN'\n  | 'BHD'\n  | 'BIF'\n  | 'BMD'\n  | 'BND'\n  | 'BOB'\n  | 'BOV'\n  | 'BRL'\n  | 'BSD'\n  | 'BTN'\n  | 'BWP'\n  | 'BYN'\n  | 'BZD'\n  | 'CAD'\n  | 'CDF'\n  | 'CHE'\n  | 'CHF'\n  | 'CHW'\n  | 'CLF'\n  | 'CLP'\n  | 'CNY'\n  | 'COP'\n  | 'COU'\n  | 'CRC'\n  | 'CUC'\n  | 'CUP'\n  | 'CVE'\n  | 'CZK'\n  | 'DJF'\n  | 'DKK'\n  | 'DOP'\n  | 'DZD'\n  | 'EGP'\n  | 'ERN'\n  | 'ETB'\n  | 'EUR'\n  | 'FJD'\n  | 'FKP'\n  | 'GBP'\n  | 'GEL'\n  | 'GHS'\n  | 'GIP'\n  | 'GMD'\n  | 'GNF'\n  | 'GTQ'\n  | 'GYD'\n  | 'HKD'\n  | 'HNL'\n  | 'HRK'\n  | 'HTG'\n  | 'HUF'\n  | 'IDR'\n  | 'ILS'\n  | 'INR'\n  | 'IQD'\n  | 'IRR'\n  | 'ISK'\n  | 'JMD'\n  | 'JOD'\n  | 'JPY'\n  | 'KES'\n  | 'KGS'\n  | 'KHR'\n  | 'KMF'\n  | 'KPW'\n  | 'KRW'\n  | 'KWD'\n  | 'KYD'\n  | 'KZT'\n  | 'LAK'\n  | 'LBP'\n  | 'LKR'\n  | 'LRD'\n  | 'LSL'\n  | 'LYD'\n  | 'MAD'\n  | 'MDL'\n  | 'MGA'\n  | 'MKD'\n  | 'MMK'\n  | 'MNT'\n  | 'MOP'\n  | 'MRU'\n  | 'MUR'\n  | 'MVR'\n  | 'MWK'\n  | 'MXN'\n  | 'MXV'\n  | 'MYR'\n  | 'MZN'\n  | 'NAD'\n  | 'NGN'\n  | 'NIO'\n  | 'NOK'\n  | 'NPR'\n  | 'NZD'\n  | 'OMR'\n  | 'PAB'\n  | 'PEN'\n  | 'PGK'\n  | 'PHP'\n  | 'PKR'\n  | 'PLN'\n  | 'PYG'\n  | 'QAR'\n  | 'RON'\n  | 'RSD'\n  | 'RUB'\n  | 'RWF'\n  | 'SAR'\n  | 'SBD'\n  | 'SCR'\n  | 'SDG'\n  | 'SEK'\n  | 'SGD'\n  | 'SHP'\n  | 'SLL'\n  | 'SOS'\n  | 'SRD'\n  | 'SSP'\n  | 'STN'\n  | 'SVC'\n  | 'SYP'\n  | 'SZL'\n  | 'THB'\n  | 'TJS'\n  | 'TMT'\n  | 'TND'\n  | 'TOP'\n  | 'TRY'\n  | 'TTD'\n  | 'TWD'\n  | 'TZS'\n  | 'UAH'\n  | 'UGX'\n  | 'USD'\n  | 'USN'\n  | 'UYI'\n  | 'UYU'\n  | 'UYW'\n  | 'UZS'\n  | 'VES'\n  | 'VND'\n  | 'VUV'\n  | 'WST'\n  | 'XAF'\n  | 'XAG'\n  | 'XAU'\n  | 'XBA'\n  | 'XBB'\n  | 'XBC'\n  | 'XBD'\n  | 'XCD'\n  | 'XDR'\n  | 'XOF'\n  | 'XPD'\n  | 'XPF'\n  | 'XPT'\n  | 'XSU'\n  | 'XTS'\n  | 'XUA'\n  | 'XXX'\n  | 'YER'\n  | 'ZAR'\n  | 'ZMW'\n  | 'ZWL';\n","import React, { FC } from 'react';\nimport { WithClass } from './utils';\n\ntype DivProps = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>;\n\nexport type LoadingIndicatorProps = Q2LoadingIndicatorProps &\n  DivProps & {\n    rows?: number;\n    columns?: number;\n  };\n\nexport const LoadingIndicator: FC<LoadingIndicatorProps> = ({\n  inline,\n  rows,\n  columns,\n  shape,\n  type = shape ? 'skeleton' : 'spinner',\n  counts = countsForRowsAndColumns({ rows, columns }),\n  ...props\n}) => {\n  return (\n    <q2-loading\n      inline={inline ? true : undefined}\n      counts={counts}\n      type={type}\n      shape={shape}\n      {...props}\n    />\n  );\n};\n\nconst countsForRowsAndColumns = ({\n  rows,\n  columns,\n}: {\n  rows?: number;\n  columns?: number;\n}) => [columns, rows].filter(Boolean).join('x');\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-loading': LoadingIndicatorProps & WithClass;\n    }\n  }\n}\n\ntype Q2LoadingIndicatorProps = {\n  /**\n   * The label that will be announced by screen readers when the\n   * loading element is reached. Supports text localization.\n   */\n  ariaLabel?: string;\n  /**\n   * The category of loading element being used.\n   * default \"spinner\"\n   */\n  type?: 'spinner' | 'skeleton';\n  /**\n   * The specific visual presentation of a loading element type.\n   * default and only valid value for type \"spinner\" is \"half-circle\"\n   * This property is only necessary for type \"skeleton\"\n   */\n  shape?:\n    | 'circle'\n    | 'rectangle'\n    | 'text'\n    | 'table'\n    | 'field'\n    | 'form'\n    | 'detailed-item'\n    | 'label-value';\n  /**\n   * Visual adjustments available to specific type and shape combinations,\n   * written as a hyphen (-) separated string.  Supported values depend on\n   * the type and shape selected.\n   *\n   * Supported values for type=\"spinner\":\n   * inline\n   *\n   * Example supported values for type=\"skeleton\":\n   * header\n   * center\n   * headless\n   *\n   * Example:\n   * element.modifiers = 'header-center'\n   */\n  modifiers?: string;\n  /**\n   * Numeric adjustments available for specific type and shape combinations,\n   * written as an x-separated string.\n   * Supported values for each shape are described in detail in each shape's\n   * section above.\n   *\n   * Examples:\n   * element.type = 'skeleton';\n   * element.shape = 'table';\n   * element.counts = '6x6';\n   */\n  counts: string;\n  /**\n   * This property is deprecated in favor having inline present in the modifiers list.\n   * Allows q2-loading elements of type='spinner' to display inline with text.\n   */\n  inline?: boolean;\n};\n","import React, { FC } from 'react';\nimport { WithClass } from './utils';\n\ntype DivProps = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>;\n\nexport type NotificationProps = Q2MessageProps & DivProps;\n\nexport const Message: FC<NotificationProps> = props => {\n  return <q2-message {...props} />;\n};\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-message': NotificationProps & WithClass;\n    }\n  }\n}\n\ntype Q2MessageProps = {\n  /**\n   * The type of notication to display.\n   */\n  type?: 'info' | 'success' | 'warning' | 'error';\n  /**\n   * When true, property 'role' (internal property) is unset and does not\n   * immediately announce itself to screen readers\n   */\n  description?: boolean;\n};\n","import React, { FC, useRef } from 'react';\n\nimport useEventListener from '@use-it/event-listener';\nimport { WithClass } from './utils';\n\ntype RadioGroupProps = Q2RadioGroupProps & InputProps;\n\nexport const RadioGroup: FC<RadioGroupProps> = ({\n  children,\n  onChange,\n  ...props\n}) => {\n  const ref = useRef();\n\n  useEventListener(\n    'change',\n    (event: any) => {\n      if (onChange) {\n        event.stopPropagation();\n        onChange({\n          ...event,\n          // @ts-ignore\n          type: 'input',\n          target: {\n            value: event.detail.value,\n            formattedValue: event.detail.formattedValue,\n          },\n        });\n      }\n    },\n    ref.current\n  );\n\n  return (\n    <q2-radio-group ref={ref as any} {...props}>\n      {children}\n    </q2-radio-group>\n  );\n};\n\ntype RadioProps = Q2RadioProps & InputProps;\n\nexport const Radio: FC<RadioProps> = ({ children, ...props }) => {\n  return <q2-radio {...props}>{children}</q2-radio>;\n};\n\ntype InputProps = React.DetailedHTMLProps<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-radio-group': RadioGroupProps & WithClass;\n      'q2-radio': RadioProps & WithClass;\n    }\n  }\n}\n\ntype Q2RadioGroupProps = {\n  /**\n   * Text for the fieldset legend describing radio group\n   *\n   * **Localizable**\n   */\n  label?: string;\n\n  disabled?: boolean;\n\n  optional?: boolean;\n\n  value?: string;\n\n  name?: string;\n};\n\ntype Q2RadioProps = {\n  /**\n   * Text for the fieldset legend describing radio group\n   *\n   * **Localizable**\n   */\n  label?: string;\n\n  'aria-label'?: string;\n\n  disabled?: boolean;\n\n  value?: string;\n};\n","import React, { FC, useRef } from 'react';\nimport useEventListener from '@use-it/event-listener';\nimport { WithClass } from './utils';\n\ntype DivProps = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>;\n\nexport type SectionProps = Q2SectionProps &\n  DivProps & {\n    /**\n     * Serves as the header text. Renders into an h2 element.\n     */\n    label: React.ReactNode;\n  };\n\nexport const Section: FC<SectionProps> = ({\n  label,\n  collapsible = false,\n  expanded = false,\n  onToggle,\n  children,\n  ...props\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEventListener(\n    'change',\n    event => {\n      if (onToggle) {\n        // @ts-ignore\n        onToggle(event.detail.expanded);\n      }\n    },\n    ref.current\n  );\n\n  return (\n    <q2-section\n      collapsible={collapsible ? true : undefined}\n      expanded={expanded ? true : undefined}\n      label={label}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </q2-section>\n  );\n};\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-section': SectionProps & WithClass;\n    }\n  }\n}\n\ntype Q2SectionProps = {\n  /**\n   * Flag for whether or not the section can be collapsed.\n   */\n  collapsible?: boolean;\n\n  /**\n   * Flag for whether or not the section content is expanded. Only applicable for collapsible sections.\n   */\n  expanded?: boolean;\n\n  onToggle?: (open: boolean) => void;\n};\n","import React, { FC, useRef } from 'react';\n\nimport { useId } from '@reach/auto-id';\nimport useEventListener from '@use-it/event-listener';\nimport { WithClass } from './utils';\n\ntype DivProps = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>;\n\nexport type TabsContainerProps = Q2TabsContainerProps &\n  DivProps & {\n    onChange?: (tabName: string) => void;\n  };\n\nexport const TabsContainer: FC<TabsContainerProps> = ({\n  children,\n  onChange,\n  ...props\n}) => {\n  const ref = useRef<any>();\n  const name = useId(props.name);\n\n  useEventListener(\n    'change',\n    event => {\n      if (onChange) {\n        onChange(event.detail?.value);\n      }\n    },\n    ref.current\n  );\n\n  const childrenWithName = React.Children.map(children, child => {\n    return React.isValidElement(child)\n      ? React.cloneElement(child, {\n          name,\n        })\n      : null;\n  });\n\n  return (\n    <q2-tab-container {...props} name={name} ref={ref}>\n      {childrenWithName}\n    </q2-tab-container>\n  );\n};\n\nexport type TabProps = Q2TabProps & DivProps;\n\nexport const Tab: FC<TabProps> = props => {\n  const value = useId(props.value);\n  return <q2-tab-pane {...props} value={value} />;\n};\n\ndeclare module 'react' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'q2-tab-container': TabsContainerProps & WithClass;\n      'q2-tab-pane': TabProps & WithClass;\n    }\n  }\n}\n\ntype Q2TabsContainerProps = {\n  /**\n   * Corresponds to the value of the selected tab pane.\n   */\n  value?: string;\n\n  /**\n   * Determines the font size of tab controls.\n   */\n  type?: 'main' | 'section';\n\n  /**\n   * Used to establish the relationship between q2-tab-container and its\n   * associated tab panes. A unique name will be defined if one is not provided.\n   */\n  name?: string;\n\n  /**\n   * Controls which variables are used to color the tab controls.\n   */\n  color?: 'alt';\n};\n\ntype Q2TabProps = {\n  /**\n   * Serves as the pane's value. Should correspond to the q2-tab-container value\n   */\n  value?: string;\n\n  /**\n   * Serves as the text that will be visible in the tab control provided by q2-tab-container\n   */\n  label?: string;\n\n  /**\n   * Creates an explict relationship with its wrapping q2-tab-container and sibling panes.\n   */\n  name: string;\n};\n","import React, { Children, cloneElement, isValidElement } from 'react';\n\nimport classNames from 'classnames';\n\ntype PositionOption = 'n' | 'e' | 's' | 'w' | 'ne' | 'nw' | 'se' | 'sw';\n\ntype TooltipProps = {\n  position?: PositionOption;\n  label?: string;\n  className?: string;\n  multiline?: boolean;\n};\n\nexport const Tooltip: React.FC<TooltipProps> = ({\n  children,\n  position = 'n',\n  label,\n  className,\n  multiline = false,\n}) => {\n  const childrenWithClass = Children.map(children, child => {\n    if (!isValidElement(child)) {\n      return child;\n    }\n\n    const cls = classNames([\n      className,\n      'tooltipped',\n      `tooltipped-${position}`,\n      child.props.className,\n      {\n        'tooltipped-multiline': multiline,\n      },\n    ]);\n\n    return cloneElement(child, {\n      className: cls,\n      'aria-label': child.props['aria-label'] || label,\n    });\n  });\n\n  return <>{childrenWithClass}</>;\n};\n"],"names":["StyledIcon","styled","className","props","React","shouldForwardProp","createShouldForwardProp","system","strokeWidth","property","stroke","scale","strokeSecondary","Icon","type","Button","badge","block","disabled","icon","cls","classNames","undefined","checksums","sunday","monday","tuesday","wednesday","thursday","friday","saturday","allDays","Object","keys","weekendDays","DropdownSelectOption","children","display","cssVar","name","cssVarList","start","end","prefix","defaultVal","list","i","push","theme","fonts","body","heading","monospace","colors","text","muted","background","link","linkHover","primary","primaryLight","primaryDark","secondary","secondaryLight","secondaryDark","black","white","gray","grayLight","grayDark","highlight","stoplight","info","success","warning","alert","breakpoints","space","radii","shadows","variants","bg","color","cache","createCache","key","stylisPlugins","extraScopePlugin","maskedAccountNumber","balance","jsx","value","id","Flex","sx","alignItems","Box","flex","Text","fontWeight","numeral","format","indeterminate","onChange","ref","useRef","useEffect","current","onchange","checksum","days","validDaysOfWeek","blockWeekends","startDate","validDates","invalidDates","daysOfWeekChecksum","_days","filter","day","includes","map","toString","reduce","acc","el","useEventListener","event","stopPropagation","target","detail","label","onClick","onRemove","e","removable","Boolean","multiple","multilineOptions","onSearchInput","selectedOptions","query","searchable","style","margin","separator","iconStrokeColor","persistentLabel","ariaLabel","formatModifier","formattedValue","iconLeft","iconRight","hideMessages","readonly","clearable","optional","errors","hints","inline","shape","counts","rows","columns","join","collapsible","expanded","onToggle","useId","_event$detail","childrenWithName","Children","child","isValidElement","cloneElement","CacheProvider","ThemeUIProvider","defaultTheme","position","multiline","childrenWithClass"],"mappings":"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"}